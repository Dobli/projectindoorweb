package de.hftstuttgart.projectindoorweb.web;

import de.hftstuttgart.projectindoorweb.application.internal.AssertParam;
import de.hftstuttgart.projectindoorweb.inputHandler.PreProcessingService;
import de.hftstuttgart.projectindoorweb.persistence.PersistencyService;
import de.hftstuttgart.projectindoorweb.persistence.entities.*;
import de.hftstuttgart.projectindoorweb.positionCalculator.PositionCalculatorService;
import de.hftstuttgart.projectindoorweb.web.internal.*;
import de.hftstuttgart.projectindoorweb.web.internal.EvaluationEntry;
import de.hftstuttgart.projectindoorweb.web.internal.util.TransmissionHelper;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.*;

public class RestTransmissionServiceImpl implements RestTransmissionService {

    private PersistencyService persistencyService;
    private PreProcessingService preProcessingService;
    private PositionCalculatorService positionCalculatorService;

    public RestTransmissionServiceImpl(PersistencyService persistencyService, PreProcessingService preProcessingService,
                                       PositionCalculatorService positionCalculatorService) {
        this.persistencyService = persistencyService;
        this.preProcessingService = preProcessingService;
        this.positionCalculatorService = positionCalculatorService;
    }

    @Override
    public boolean processEvaalFiles(String buildingIdentifier, boolean evaluationFiles, MultipartFile[] radioMapFiles) {

        if (buildingIdentifier == null || buildingIdentifier.isEmpty()
                || radioMapFiles == null || radioMapFiles.length == 0) {
            return false;
        }

        File[] radioMapFileArray = new File[radioMapFiles.length];

        try {
            for (int i = 0; i < radioMapFiles.length; i++) {
                radioMapFileArray[i] = TransmissionHelper.convertMultipartFileToLocalFile(radioMapFiles[i]);
            }
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }

        try {
            long buildingId = Long.valueOf(buildingIdentifier);
            Building building = this.persistencyService.getBuildingById(buildingId);

            if (building != null) {
                List<EvaalFile> processedEvaalFiles = this.preProcessingService.processIntoLogFiles(building, evaluationFiles, radioMapFileArray);
                return this.persistencyService.saveEvaalFiles(processedEvaalFiles);
            } else {
                return false;
            }


        } catch (NumberFormatException ex) {
            return false;
        }


    }

    @Override
    public List<CalculatedPosition> generatePositionResults(BatchPositionRequestElement batchPositionRequestElement) {

        List<CalculatedPosition> result = new ArrayList<>();

        if (batchPositionRequestElement == null) {
            return result;
        }

        try {
            long buildingId = batchPositionRequestElement.getBuildingIdentifier();
            Building building = this.persistencyService.getBuildingById(buildingId);

            EvaalFile evaluationFile = this.persistencyService.getEvaalFileForId(batchPositionRequestElement.getEvalFileIdentifier());

            Long[] radioMapFileIds = batchPositionRequestElement.getRadioMapFileIdentifiers();
            EvaalFile[] radioMapFiles = new EvaalFile[radioMapFileIds.length];


            for (int i = 0; i < radioMapFileIds.length; i++) {
                radioMapFiles[i] = this.persistencyService.getEvaalFileForId(radioMapFileIds[i]);
            }

            if (evaluationFile != null && TransmissionHelper.areRequestedFilesPresent(radioMapFiles)) {

                String projectName = String.format("AutoGenerated_%d", System.currentTimeMillis());
                String algorithmType = batchPositionRequestElement.getAlgorithmType();
                Set<ProjectParameter> projectParameters = batchPositionRequestElement.getProjectParameters();

                long projectId = this.persistencyService.createNewProject(projectName, algorithmType, projectParameters);
                Project autoGeneratedProject = this.persistencyService.getProjectById(projectId);

                if (autoGeneratedProject != null) {
                    List<WifiPositionResult> retrievedWifiResults =
                            (List<WifiPositionResult>) this.positionCalculatorService.calculatePositions(evaluationFile, radioMapFiles, building);

                    result = TransmissionHelper.convertToCalculatedPositions(retrievedWifiResults);
                }

            }

        } catch (NumberFormatException ex) {
            ex.printStackTrace();

        } finally {
            return result;
        }

    }

    @Override
    public CalculatedPosition getPositionForWifiReading(SinglePositionRequestEntry singlePositionRequestEntry) {

        if (singlePositionRequestEntry == null) {

            return createEmptyCalculatedPosition();
        }

        Long[] radioMapFileIds = singlePositionRequestEntry.getRadioMapFileIdentifiers();
        EvaalFile[] radioMapFiles = new EvaalFile[radioMapFileIds.length];


        for (int i = 0; i < radioMapFileIds.length; i++) {
            radioMapFiles[i] = this.persistencyService.getEvaalFileForId(radioMapFileIds[i]);
        }

        if (TransmissionHelper.areRequestedFilesPresent(radioMapFiles)) {
            WifiPositionResult retrievedWifiResult = (WifiPositionResult) this.positionCalculatorService
                    .calculateSinglePosition(singlePositionRequestEntry.getWifiReading(), radioMapFiles);
            return TransmissionHelper.convertToCalculatedPosition(retrievedWifiResult);
        }

        return createEmptyCalculatedPosition();

    }

    @Override
    public List<CalculatedPosition> getPositionResultsForProjectIdentifier(String projectIdentifier) {

        List<CalculatedPosition> result = new ArrayList<>();

        if (AssertParam.isNullOrEmpty(projectIdentifier)) {
            return result;
        }

        /*

        TODO Clarify feasability of this method! Reason:

        The calculated results not only depend on the project, but also on the eval file or wifi lines
        that were passed in for their calculations. As a result, the project ID cannot uniquely identify a set of
        calculated positions.

        */
        return result;


    }

    @Override
    public long saveNewProject(NewProjectRequestElement newProjectRequestElement) {

        if (newProjectRequestElement == null) {
            return -1;
        }

        return this.persistencyService.createNewProject(newProjectRequestElement.getProjectName(),
                newProjectRequestElement.getAlgorithmType(),
                newProjectRequestElement.getProjectParameterSet());

    }

    @Override
    public boolean saveCurrentProject(CurrentProjectRequestElement currentProjectRequestElement) {


        if (currentProjectRequestElement == null) {
            return false;
        }

        try {

            long projectId = Long.parseLong(currentProjectRequestElement.getProjectIdentifier());
            
            return this.persistencyService.updateProject(projectId,
                    currentProjectRequestElement.getProjectName(),
                    currentProjectRequestElement.getAlgorithmType(),
                    currentProjectRequestElement.getProjectParameterSet());

        } catch (NumberFormatException ex) {
            return false;
        }

    }

    @Override
    public boolean deleteSelectedProject(String projectIdentifier) {

        if (AssertParam.isNullOrEmpty(projectIdentifier)) {
            return false;
        }

        try {
            long projectId = Long.parseLong(projectIdentifier);
            return this.persistencyService.deleteProject(projectId);
        } catch (NumberFormatException ex) {
            return false;
        }

    }

    @Override
    public ProjectElement loadSelectedProject(String projectIdentifier) {

        if (AssertParam.isNullOrEmpty(projectIdentifier)) {
            return createEmptyProjectElement();
        }

        try {
            long projectId = Long.parseLong(projectIdentifier);
            Project project = this.persistencyService.getProjectById(projectId);

            if (project != null) {
                return new ProjectElement(project.getProjectName(), String.valueOf(project.getId()),
                        getProjectParametersFromInternalEntity(project.getProjectParameters()));
            }

        } catch (NumberFormatException ex) {
            ex.printStackTrace();
        }

        return createEmptyProjectElement();
    }

    @Override
    public List<ProjectElement> getAllProjects() {

        List<Project> projects = this.persistencyService.getAllProjects();

        return convertToProjectElements(projects);

    }

    @Override
    public List<BuildingJsonWrapperSmall> getAllBuildings() {
        List<Building> buildings = this.persistencyService.getAllBuildings();

        return TransmissionHelper.convertToBuildingSmallJsonWrapper(buildings);
    }

    @Override
    public List<AlgorithmType> getAllAlgorithmTypes() {//TODO use reflection instead if viable
        List<AlgorithmType> result = new ArrayList<>();

        AlgorithmType wifiAlgorithm = new AlgorithmType("WifiPositionCalculatorServiceImpl", "WIFI");

        result.add(wifiAlgorithm);

        return result;
    }

    @Override
    public List<EvaluationEntry> getEvaluationFilesForBuilding(String buildingIdentifier) {

        List<EvaluationEntry> result = new ArrayList<>();

        if (AssertParam.isNullOrEmpty(buildingIdentifier)) {
            return result;
        }

        try {

            long buildingId = Long.valueOf(buildingIdentifier);
            Building building = this.persistencyService.getBuildingById(buildingId);
            if (building != null) {
                List<EvaalFile> evaalFiles = this.persistencyService.getEvaluationFilesForBuilding(building);
                result = TransmissionHelper.convertToEvaluationEntries(evaalFiles);
            }


        } catch (NumberFormatException ex) {
            ex.printStackTrace();
        } finally {
            return result;
        }


    }

    @Override
    public List<RadioMapEntry> getRadioMapFilesForBuilding(String buildingIdentifier) {

        List<RadioMapEntry> result = new ArrayList<>();
        if (AssertParam.isNullOrEmpty(buildingIdentifier)) {
            return result;
        }

        try {

            long buildingId = Long.valueOf(buildingIdentifier);
            Building building = this.persistencyService.getBuildingById(buildingId);
            if (building != null) {
                List<EvaalFile> evaalFiles = this.persistencyService.getRadioMapFilesForBuiling(building);
                result = TransmissionHelper.convertToRadioMapEntry(evaalFiles);
            }


        } catch (NumberFormatException ex) {
            ex.printStackTrace();
        } finally {
            return result;
        }

    }

    @Override
    public List<ParameterElement> getAlgorithmParameterListForAlgorithmId(String algorithmIdentifier) {
        List<ParameterElement> result = new ArrayList<>();
        if (AssertParam.isNullOrEmpty(algorithmIdentifier)) {
            return result;
        }
        return result;//TODO implement when ready
    }

    @Override
    public boolean addNewBuilding(BuildingJsonWrapperLarge buildingJsonWrapper) {

        if (buildingJsonWrapper == null) {
            return false;
        }
        try {

            String buildingName = buildingJsonWrapper.getBuildingName();
            int numberOfFloors = buildingJsonWrapper.getNumberOfFloors();
            int imagePixelWidth = buildingJsonWrapper.getImagePixelWidth();
            int imagePixelHeight = buildingJsonWrapper.getImagePixelHeight();
            PositionAnchor southEastAnchor = buildingJsonWrapper.getSouthEast();
            PositionAnchor southWestAnchor = buildingJsonWrapper.getSouthWest();
            PositionAnchor northEastAnchor = buildingJsonWrapper.getNorthEast();
            PositionAnchor northWestAnchor = buildingJsonWrapper.getNorthWest();

            return this.persistencyService.addNewBuilding(buildingName, numberOfFloors, imagePixelWidth, imagePixelHeight,
                    southEastAnchor, southWestAnchor, northEastAnchor, northWestAnchor);
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    private CalculatedPosition createEmptyCalculatedPosition() {
        return new CalculatedPosition(0, 0, 0, false, "");
    }

    private ProjectElement createEmptyProjectElement() {
        return new ProjectElement("", "", new HashSet<>());
    }

    private List<ProjectElement> convertToProjectElements(List<Project> projects) {

        List<ProjectElement> result = new ArrayList<>(projects.size());

        for (Project project :
                projects) {
            result.add(new ProjectElement(project.getProjectName(), String.valueOf(project.getId()),
                    getProjectParametersFromInternalEntity(project.getProjectParameters())));
        }

        return result;


    }

    private Set<ProjectParameter> getProjectParametersFromInternalEntity(List<Parameter> parameters) {

        Set<ProjectParameter> projectParameters = new LinkedHashSet<>();

        for (Parameter parameter :
                parameters) {
            projectParameters.add(new ProjectParameter(parameter.getParameterName(), parameter.getParamenterValue()));
        }

        return projectParameters;


    }


}
